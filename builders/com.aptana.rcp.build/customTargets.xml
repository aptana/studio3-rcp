<project name="customTargets overrides" default="noDefault">
	<import file="${eclipse.pdebuild.templates}/headless-build/customTargets.xml" />
	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="${builder}/ant-contrib/ant-contrib.jar" />
		</classpath>
	</taskdef>

	<!-- ===================================================================== -->
	<!-- Steps to do before setup -->
	<!-- ===================================================================== -->
	<target name="preSetup">
		<antcall target="replaceVersions" />
	</target>

	<target name="replaceVersions">
		<tstamp>
			<format property="timestamp" pattern="dd MMMM yyyy, HH:mm:ss" locale="en" />
		</tstamp>
		<tstamp>
			<format property="short.timestamp" pattern="ddMMyyyyHHmmss" locale="en" />
		</tstamp>
		<tstamp>
			<format property="year" pattern="yyyy" locale="en" />
		</tstamp>
		<echo message="Updating versions in feature and plugin manifests. Full version: ${version.full}, qualifier: ${build.revision}" />
		<!-- Replace very specific files (taken from our old build) -->
		<replace file="${buildDirectory}/plugins${product}" token="0.0.0.qualifier" value="${version.full}-${short.timestamp}" />
		<replace file="${buildDirectory}/plugins/com.aptana.rcp/plugin.properties" token="0.0.0.qualifier" value="${version.full}" />
		<replace file="${buildDirectory}/plugins/com.aptana.rcp/plugin.properties" token="%timestamp%" value="${timestamp}" />
		<replace file="${buildDirectory}/plugins/com.aptana.rcp/plugin.properties" token="%branch.name%" value="${env.GIT_BRANCH}" />
		<replace file="${buildDirectory}/plugins/com.aptana.rcp/plugin.properties" token="%build.tag%" value="${env.BUILD_TAG}" />
		<replace file="${buildDirectory}/features/com.aptana.feature.rcp/feature.properties" token="build.name" value="${build.name}" />
		<replace file="${buildDirectory}/features/com.aptana.feature.rcp/rootfiles/version.txt" token="0.0.0" value="${version.full}" />
		<replace file="${buildDirectory}/features/com.aptana.feature.rcp/rootfiles/version.txt" token=".qualifier" value="${build.revision}" />

		<!-- Inject year and versions into Info.plist -->
		<replace file="${builder}/custom/macosx/Info.plist" token="0.0.0.qualifier" value="${version.full}" />
		<replace file="${builder}/custom/macosx/Info.plist" token="%year%" value="${year}" />
		<replace file="${builder}/custom/macosx/Info.plist" token="0.0.0" value="${version.short}" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before the repositories are being processed -->
	<!-- ===================================================================== -->
	<target name="preProcessRepos">
		<p2.mirror destination="file:${repoBaseLocation}/mirrored">
			<source location="${studio3.p2.repo}" />
			<source location="${php.p2.repo}" />
			<source location="${pydev.p2.repo}" />
			<source location="${radrails.p2.repo}" />
			<iu id="com.aptana.feature.feature.group" />
			<iu id="com.aptana.php.feature.feature.group" />
			<iu id="com.aptana.pydev.feature.feature.group" />
			<iu id="org.radrails.rails.feature.group" />
		</p2.mirror>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before running package. -->
	<!-- ===================================================================== -->
	<target name="prePackage">
		<!-- Wipe and recreate deploy dir -->
		<delete dir="${deploy.dir}" failonerror="false" />
		<mkdir dir="${deploy.dir}" />

		<!-- Sign the JARs once before we generate standalones -->
		<antcall target="signJars" />
	</target>

	<!-- This is a hack to workaround https://bugs.eclipse.org/bugs/show_bug.cgi?id=255518 -->
	<!-- We need to do our own signing here so we can limit the JARs it applies to -->
	<target name="signJars" if="sign.jars">
		<echo message="Signing plugins and features at: ${buildDirectory}/buildRepo" />
		<!-- Load the final version strings for all features and plugins...
			this stores the feature/plugin id as key and the version string as the value, which we use below in the script...
		-->
		<property name="p2.build.repo" value="file:${buildDirectory}/buildRepo" />
		<property file="${buildDirectory}/finalFeaturesVersions.properties" />
		<property file="${buildDirectory}/finalPluginsVersions.properties" />

		<script description="Sign specific feature/plugin JARs" language="javascript">
			<![CDATA[
				var ProcessRepoTask = org.eclipse.equinox.p2.internal.repository.tools.tasks.ProcessRepoTask;
				var IUDescription = org.eclipse.equinox.p2.internal.repository.tools.tasks.IUDescription;

				var featureIds = project.getProperty("sign.features");
				var pluginIds = project.getProperty("sign.plugins");
				if ( featureIds.length() > 0 || pluginIds.length() > 0) {

					// We're going to call p2.process.artifacts to sign the JARs
					var processArtifacts = project.createTask("p2.process.artifacts");
					processArtifacts.setRepositoryPath(project.getProperty("p2.build.repo"));

					//var sign = processArtifacts.createSign("sign");
					var sign = new ProcessRepoTask.SigningOptions();
					sign.setAlias(project.getProperty("sign.alias"));
					sign.setKeystore(project.getProperty("sign.keystore"));
					sign.setStorepass(project.getProperty("sign.keypass"));

					processArtifacts.addConfiguredSign(sign);

					// Split the plugin and feature id list by comma delimiter
					var features = project.getProperty("sign.features").split(",");
					var plugins = project.getProperty("sign.plugins").split(",");

					// Specify the features
					for (var i = 0; i < features.length; i ++) {
						//var feature = processArtifacts.createFeature("feature");
						var feature = new IUDescription();
						feature.setId(features[i]);
						feature.setVersion(project.getProperty(features[i]));
						//processArtifacts.addFeature(feature);
						processArtifacts.addConfiguredFeature(feature);
					}

					// Now specify the plugins
					for (var i = 0; i < plugins.length; i ++) {
						//var plugin = processArtifacts.createPlugin("plugin");
						var plugin = new IUDescription();
						plugin.setId(plugins[i]);
						plugin.setVersion(project.getProperty(plugins[i]));
						processArtifacts.addConfiguredPlugin(plugin);
					}

					processArtifacts.execute();
				}
			]]>
			</script>
		</target>

		<!-- ===================================================================== -->
		<!-- Steps to do after the build is done. -->
		<!-- ===================================================================== -->
		<target name="postBuild">
			<antcall target="gatherLogs" />
			<antcall target="publish" />
		</target>

		<!-- ===================================================================== -->
		<!-- Steps to do to publish the build results -->
		<!-- ===================================================================== -->
		<target name="publish">
			<!-- Create the update site zip file -->
			<zip destfile="${builder}/${topLevelElementId}-${version.full}.zip">
				<fileset dir="${deploy.dir}" defaultexcludes="false" />
			</zip>
			<move file="${builder}/${topLevelElementId}-${version.full}.zip" todir="${deploy.dir}" />
			<!-- Rename the standalone zip files! -->
			<move todir="${deploy.dir}">
				<fileset dir="${buildDirectory}/${buildLabel}">
					<include name="*.zip" />
				</fileset>
				<mapper type="regexp" from="^(\d+\-)(.+)\.zip$$" to="studio3.\2.zip" />
			</move>
			<!-- Create a version.txt file containing the final version string -->
			<echo message="${version.full}" file="${deploy.dir}/version.txt" />
			<!-- copy over index.html file -->
			<replace token="ZIP_FILE" value="${topLevelElementId}-${version.full}.zip" file="${builder}/update_site/index.html" />
			<move file="${builder}/update_site/index.html" tofile="${deploy.dir}/index.html" />

			<!-- Check for JDT plugins -->
			<pathconvert property="jdt.found" setonempty="false">
				<path>
					<fileset dir="${deploy.dir}/plugins" includes="org.eclipse.jdt.*" />
				</path>
			</pathconvert>
			<fail message="Generated p2 repo contains JDT plugins!" if="jdt.found" />
			<!-- copy over index.html file -->
		</target>
	</project>
